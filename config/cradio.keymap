/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0      // Base alphanumeric layer
#define SYM 1       // A layer for all the symbol keys
#define NAV 2       // Navigation keys on the left hand
#define NUM 3       // Numeric keypad on left hand
#define FUN 4       // Function keys on left and media on right hand
#define SETTINGS 5  // Settings layer (desktop nav keys on right hand)

// Home row modifiers: see https://github.com/urob/zmk-config#timeless-homerow-mods
#define HL(k1,k2,k3,k4) &hml LGUI  k1 &hml LALT  k2 &hml LCTRL k3 &hml LSHFT k4
#define HR(k1,k2,k3,k4) &hmr RSHFT k1 &hmr RCTRL k2 &hmr RALT  k3 &hmr RGUI  k4

// Key positions on left and right keyboard splits
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <225>;
};
&mt {  // mod-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <225>;
};

/ {
    behaviors {
        // See https://github.com/urob/zmk-config#timeless-homerow-mods
        hml: hml {  // Left side Home Row Modifiers
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";                // Force a `hold` if other key is pressed while held
            require-prior-idle-ms = <150>;      // Force immediate tap if <150ms since last tap (avoids delay)
            hold-trigger-key-positions = <KEYS_R THUMBS>; // Only hold if key is on the other side
            hold-trigger-on-release;            // Wait in case another modifier is pressed
            tapping-term-ms = <280>;            // Force hold after 280ms
            quick-tap-ms = <200>;               // Produce repeating tap if double tapped within 175ms
        };
        hmr: hmr {  // Right side Home Row Modifiers
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
        };
        NAV_TAB_capsword: NAV_TAB_capsword {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt NAV TAB>, <&caps_word>; // SHIFT+TAB is caps_word
            mods = <(MOD_LSFT)>;
        };
    };
    combos {
        compatible = "zmk,combos";
        // Both left keys - SETTINGS layer
        combo_left_thumb {
            key-positions = <30 31>;
            bindings = <&mo SETTINGS>;
            timeout-ms = <500>;
        };
        // Both right keys - FUN layer
        combo_right_thumb {
            key-positions = <32 33>;
            bindings = <&mo FUN>;
            timeout-ms = <500>;
        };
        // Both inner thumb keys - ESC key
        combo_thumb_esc {
            key-positions = <31 32>;
            bindings = <&kp ESC>;
            timeout-ms = <500>;
        };
        // Both outer thumb keys - return to BASE layer
        combo_thumb_base_layer {
            key-positions = <30 33>;
            bindings = <&to BASE>;
            timeout-ms = <500>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer { // Base alpha layer
            bindings = <
            &kp Q       &kp W       &kp E       &kp R       &kp T           &kp Y       &kp U       &kp I       &kp O       &kp P
            HL( A,          S,          D,          F)      &kp G           &kp H        HR(J,          K,          L,          SEMI)
            &kp Z       &kp X       &kp C       &kp V       &kp B           &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH
                                  &NAV_TAB_capsword &lt SYM ENTER           &mt LSHIFT SPACE &lt NUM BSPC
            >;
        };
        sym_layer { // Symbols
            bindings = <
            &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT       &kp CARET   &kp AMPS    &kp ASTRK   &kp QMARK   &kp ESC
            HL( GRAVE,      LPAR,       RPAR,       LBKT)   &kp RBKT        &kp BSLH    HR( MINUS,      EQUAL,      SQT,        SEMI)
            &kp TILDE   &kp LT      &kp GT      &kp LBRC    &kp RBRC        &kp PIPE    &kp UNDER   &kp PLUS    &kp DQT     &kp COLON
                                                &kp TAB     &kp ENTER       &kp SPACE   &kp DEL
            >;
        };
        nav_layer { // Navigation
            bindings = <
            &kp HOME    &kp LC(LEFT)&kp LC(RIGHT)&kp END    &kp PG_UP       &kp LC(D)   &kp LC(LBKT)&kp LA(DOWN)&kp LA(UP)  &kp LC(RBKT)
            &kp LEFT    &kp UP      &kp DOWN    &kp RIGHT   &kp PG_DN       &kp DEL     &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI
            &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LC(Y)       &kp LC(BSPC)&kp LC(DEL) &kp LA(LC(MINUS))&kp LS(LC(MINUS))&kp ESC
                                                &kp TAB     &kp ENTER       &kp SPACE   &kp BSPC
            >;
        };
        num_layer { // Numbers
            bindings = <
            &kp FSLH    &kp N7      &kp N8      &kp N9      &kp MINUS       &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LC(Y)
            &kp ASTRK   &kp N4      &kp N5      &kp N6      &kp PLUS        &kp DEL     &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI
            &kp N0      &kp N1      &kp N2      &kp N3      &kp DOT         &kp BSPC    &kp UNDER   &kp COMMA   &kp DOT     &kp ESC
                                                &kp TAB     &kp ENTER       &kp SPACE   &kp BSPC
            >;
        };
        fun_layer { // Function keys and media
            bindings = <
            &kp F12     &kp F7      &kp F8      &kp F9      &kp PSCRN       &kp C_SLEEP &kp C_VOL_DN &kp C_MUTE  &kp C_VOL_UP &kp C_PWR
            &kp F11     &kp F4      &kp F5      &kp F6      &none           &none       &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI
            &kp F10     &kp F1      &kp F2      &kp F3      &none           &none       &none       &none       &none       &none
                                                &to NAV     &to BASE        &kp SPACE   &kp BSPC
            >;
        };
        settings_layer { // Used to change the keyboard's settings.
            bindings = <
            &out OUT_USB &none        &none        &none        &bt BT_CLR     &none       &kp LS(LC(LA(LEFT))) &kp LS(LC(LA(DOWN))) &kp LS(LC(LA(UP))) &kp LS(LC(LA(RIGHT)))
            &out OUT_BLE &bt BT_SEL 4 &none        &none        &sys_reset     &sys_reset  &kp LC(LA(LEFT)) &kp LC(LA(DOWN)) &kp LC(LA(UP)) &kp LC(LA(RIGHT))
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bootloader    &bootloader &kp LG(LEFT) &kp LG(DOWN) &kp LG(UP) &kp LG(RIGHT)
                                                   &none        &none          &to BASE    &to NUM
            >;
        };
    };
};
